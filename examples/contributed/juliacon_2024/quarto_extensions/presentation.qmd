---
title: Quarto Extensions
subtitle: for the Julia Community
format:
  julia-revealjs:
    scrollable: true
date: July 12, 2024
execute:
  eval: false
bibliography: bib.bib
---

# Overview {.nostretch}

::::{.columns}::::
:::{.column width='50%'}
1. What is [Quarto](#sec-quarto)?
2. Julia-themed Quarto: [Simple Extensions](#sec-simple)
3. Quarto for [Documentation](#sec-docs)
4. Quarto for [JuliaCon Proceedings](#sec-proceedings)
:::
:::{.column width='50%'}
![](www/poster.png){fig-align="center" height="400"}
:::
::::

# What is [Quarto](https://quarto.org/)? {#sec-quarto .nostretch}

- Cross-platform open-source scientific publishing tool with a focus on reproducibility.

- It is based on Markdown, which is easy to learn and write.

- Very flexible and can be extended with custom templates and styles.

# Julia-themed Quarto {#sec-simple .nostretch}

::::{.columns}::::
:::{.column width='50%'}
Simple Quarto extension that adds a Julia-themed touch to your documents.

> Extensions are a powerful way to modify and extend the behavior of Quarto.
:::
:::{.column width='50%'}
![](www/julia_quarto.gif){fig-align="center" height="400"}
:::
::::

## Getting Started

To install the Julia-themed Quarto extensions, run:

```shell
quarto add pat-alt/quarto-julia
```

::::{.columns}::::
:::{.column width='50%'}

### Formats

- HTML (articles)
- Revealjs (presentations)

:::
:::{.column width='50%'}

### Usage

Simply adjust the YAML front matter of your document:

```yaml
title: Julia-themed Quarto
format:
  julia-html: default
  julia-revealjs:
    scrollable: true
author: pat-alt
date: last-modified
```

:::
::::

## Fonts {.smaller}

1. The theme uses the [JuliaMono](https://juliamono.netlify.app/) font for `monospace` text and `code`.
2. For headers and blockquotes, the theme uses the [Barlow](https://tribby.com/fonts/barlow/){style="font-family: Barlow;"} font.
3. For all other text, the theme uses the [Roboto](https://fonts.google.com/specimen/Roboto){style="font-family: Roboto;"} font, just like the Julia [website](https://julialang.org/).
4. Also available is the [Bangla MN](https://www.onlinewebfonts.com/download/3d37467c4a9c7c1188bc3e0b7aadfa0d){style="font-family: Bangla MN;"} by Muthu Nedumaran of [Murasu Systems](http://murasu.com/), which is closely related to the official Julia [logo font](https://github.com/JuliaLang/julia-logo-graphics#about-the-font).

::: {.callout-caution}

## Bangla MN Copyright

This Bangla MN font is copyrighted by MN, so make sure you are allowed to use it.
:::

## Code

Inline code looks like this `print("hello üåç")`. Code blocks look like [this](https://www.patalt.org/quarto-julia-website/examples/basic_formats/article/#code) (Revealjs not affected):

```{.julia}
using CounterfactualExplanations, TaijaData

# Data and Classifier:
counterfactual_data = CounterfactualData(load_linearly_separable()...)
M = fit_model(counterfactual_data, :Linear)

# Select random sample:
target = 2
factual = 1
chosen = rand(findall(predict_label(M, counterfactual_data) .== factual))
x = select_factual(counterfactual_data, chosen)

# Counterfactual search:
generator = GenericGenerator()
ce = generate_counterfactual(x, target, counterfactual_data, M, generator)
```

## Callouts {.smaller}

::: {.callout-note}

# Note

This is a note in [julia_blue]{class="julia-blue"}. Note that for Revealjs, icons are deactivated for callouts by default.

:::

::: {.callout-tip}

# Tip

This is a tip in [julia_green]{class="julia-green"}.

:::

::: {.callout-caution}

# Caution

This is a caution callout in [julia_purple]{class="julia-purple"}.

:::

::: {.callout-important}

# Important

This is an important callout in [julia_red]{class="julia-red"}.

:::

# Documentation {#sec-docs}

## Goals

Tutorials that are

-  integrated in the documentation ([`Documenter.jl`](https://documenter.juliadocs.org/stable/))
   - Integrated Links within the documentation
   - include mathematical formulae
- render into Markdown

. . .

- show code and results
- reproducible
- run on CI (cached)

## General Workflow {.smaller}

- write tutorials (`.qmd`) for a package in `tutorials/`
- run them when generating the documentation
- should render them into `docs/src/tutorials/` (as `.md`)

### An Example

````{markdown}
---
title: "A short example"
---

```{{julia}}
#| echo: false
#| code-fold: true
#| output: false
cd(@__DIR__);
using Pkg; Pkg.activate("."); # oen reproducible environment
```

First, load all necessary packages

```{{julia}}
using Manopt, Manifolds
M = Sphere(2)
```
````

## Workflow II: Quarto {.smaller}

Put a `_quarto.yml` file in `tutorials/` with

```{YAML}
project:
  title: "My Tutorials"
  output-dir: ../docs/src/tutorials
  render:
    - "*.qmd"
    - "!NotThisFile.qmd"
```

Last line: Exclude for example benchmark from general runs.

. . .

- `quarto render filename.qmd` to render a certain one
- `quarto render` in `tutorials/` to generate a√∏√∏ but the `!`-excluded ones
- `tutorials/_freeze` is a Cache: only renders if file has been changed.

. . .

### Tip

Use the [Quarto VS Code extension](https://marketplace.visualstudio.com/items?itemName=quarto.quarto) and `Quarto Preview` while writing a tutorial


## Workflow III: Documenter

* Use `CondaPkg.jl` to handle/install Python, creating a `CondaPkg.toml` specifying the Python version

```{toml}
[deps]
jupyter = ""
python = "3.11"
```

And include rendering the tutorials in your `make.jl`

````{{julia}}
using CondaPkg
CondaPkg.withenv() do
    tutorials_folder = (@__DIR__) * "/../tutorials"
    run(`quarto render $(tutorials_folder)`)
end
````

## Workflow IV: GitHub Action {.smaller}

````{.yaml}
- name: Cache Quarto
  uses: actions/cache@v4
  with:
    path: tutorials/_freeze
    key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('tutorials/*.qmd') }}
    restore-keys: |
      ${{ runner.os }}-${{ env.cache-name }}-
- name: Cache Documenter
  uses: actions/cache@v4
  with:
    path: docs/src/tutorials
    key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('tutorials/*.qmd') }}
    restore-keys: |
      ${{ runner.os }}-${{ env.cache-name }}-
````

This sets up Caches for the folders

- `docs/src/tutorials` rendered Markdown files
- `tutorials/_freeze` Quarto Cache
- one could also cache `docs/.CondaPkg` to reduce loading Python packages

. . .

#### There we are!

Cached, reproducible Tutorials that integrate with `Documenter.jl`.


## Comments {.smaller}

Running `make.jl` from shell, one can

- (de)activate running Quarto
- (de)activate generting the tutorials menu (locally)
- clear cache

. . .

### Challenges

- Cache vs. breaking versions of the package
- Recommendation: Maybe print Package versions
- Quarto replaces spaces in markdown links ``[A](@ref B)`` with ``[A](@ref%20B)``.

  These have to be ‚Äúescaped‚Äù ``` `[A](@ref B)`{=commonmark} ``` to stay unmodified
- Due to pandoc: for now write math in `$...$` and not ``` ``...`` ```

## Documenter Summary {.smaller}

Quarto notebooks allow for an easy way to have tutorials

- executed code
- reproducible
- cached and rendered on CI
- inegrated (with `@ref` links in `Documenter.jl`)
- citing (with `[citekey](@cite)` and [`DocumenterCitations.jl`](https://github.com/JuliaDocs/DocumenterCitations.jl))
- extended referencing (`@extref` and [`DocumenterInterLinks.jl`](https://github.com/JuliaDocs/DocumenterInterLinks.jl))

See [Manopt.jl: Optimize](https://manoptjl.org/stable/tutorials/Optimize/) for a full example, rendered from
[here](https://github.com/JuliaManifolds/Manopt.jl/blob/master/tutorials/Optimize.qmd)

. . .

### Soon

- the [`QuartoNotebookRunner.jl`](https://github.com/PumasAI/QuartoNotebookRunner.jl)
  should provide native rendering in pure Julia
- Pluto notebooks might be used as [input there as well](https://github.com/PumasAI/QuartoNotebookRunner.jl/issues/125)

# JuliaCon Proceedings {#sec-proceedings .nostretch}

::::{.columns}::::
:::{.column width='60%'}
The [quarto-juliacon-proceedings](https://github.com/pat-alt/quarto-juliacon-proceedings) extension adds support for writing a JuliaCon Proceedings article in Quarto.
:::
:::{.column width='40%'}
:::
::::

::::{.columns}::::
:::{.column width='50%'}
:::
:::{.column width='50%'}
![](www/jcon_logo.png){fig-align="center"}
:::
::::


## Getting Started

To install the [JuliaCon Proceedings extension](https://github.com/pat-alt/quarto-juliacon-proceedings), run:

```shell
quarto add pat-alt/quarto-juliacon-proceedings
```

::::{.columns}::::
:::{.column width='40%'}

:::{.callout-caution}

# Disclaimer

PDF version resembles the official JuliaCon Proceedings format almost exactly but it is not officially endorsed by the JuliaCon Proceedings team.

See this [issue](https://github.com/JuliaCon/JuliaConSubmission.jl/issues/36).

:::
:::
:::{.column width='60%'}
Supports both PDF and HTML:

```{.yaml}
---
title: JuliaCon Proceedings in Quarto
format:
  juliacon-proceedings-pdf:
    keep-tex: true
  juliacon-proceedings-html: default
author:
  - name: Patrick Altmeyer
    affiliations:
      - Delft University of Technology
    orcid: 0000-0003-4726-8613
---
```
:::
::::


## Motivation

- By embracing Quarto, JuliaCon Proceedings can set an example for how to write reproducible documents.
    - Code and results are directly integrated into the document.
    - Executable code blocks serve as a form of testing.
    - Same document can be rendered into HTML, PDF, ...
- Easier for authors to write their submissions.
- Gateway to more advanced features such as interactive figures and executable code blocks in HTML documents.

## Showcase

::::{.columns}::::
:::{.column width='50%'}

The following two example articles were rendered using the extension:

- Official extension template: [[pdf](https://www.patalt.org/quarto-juliacon-proceedings/template.pdf), [html](https://www.patalt.org/quarto-juliacon-proceedings/template.html)]
- @altmeyer2023explaining: [[pdf](../../../juliacon/counterfactual-explanations/paper.pdf), [html](../../../juliacon/counterfactual-explanations/paper.html)]
:::
:::{.column width='50%'}
```{=html}
<iframe style="border:2px solid red;" width="800" height="500" marginheight="0" marginwidth="0" src="../../../juliacon/counterfactual-explanations/paper.html"></iframe>
```
:::
::::

## References {.smaller}
